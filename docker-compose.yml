version: '3.8'
services:

  reverse-proxy:
    image: traefik:v3.2
    command:
      - --api.insecure=true
      - --providers.docker
      - --providers.file.directory=/etc/traefik/dynamic
      - --entrypoints.web.address=:81
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls=true
    ports:
      - "81:81"
      - "8080:8080"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./dynamic:/etc/traefik/dynamic
      - ./certs:/certs:ro
    networks:
      - microservice-network

  postgres-user-db:
    image: postgres:13
    container_name: postgres-user-db
    environment:
      POSTGRES_DB: user-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Donmishu215
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.user-db.rule=Host(`user-db.localhost`)"
      - "traefik.http.routers.user-db.entrypoints=websecure"
      - "traefik.http.routers.user-db.tls=true"
      - "traefik.http.services.user-db.loadbalancer.server.port=5432"
    networks:
      - microservice-network

  postgres-device-db:
    image: postgres:13
    container_name: postgres-device-db
    environment:
      POSTGRES_DB: device-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Donmishu215
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.device-db.rule=Host(`device-db.localhost`)"
      - "traefik.http.routers.device-db.entrypoints=websecure"
      - "traefik.http.routers.device-db.tls=true"
      - "traefik.http.services.device-db.loadbalancer.server.port=5432"
    networks:
      - microservice-network

  postgres-monitoring-db:
    image: postgres:13
    container_name: postgres-monitoring-db
    environment:
      POSTGRES_DB: monitoring-communication-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Donmishu215
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.monitoring-communication-db.rule=Host(`monitoring-communication-db.localhost`)"
      - "traefik.http.routers.monitoring-communication-db.entrypoints=websecure"
      - "traefik.http.routers.monitoring-communication-db.tls=true"
      - "traefik.http.services.monitoring-communication-db.loadbalancer.server.port=5432"
    networks:
      - microservice-network

  postgres-chat-db:
    image: postgres:13
    container_name: postgres-chat-db
    environment:
      POSTGRES_DB: chat-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Donmishu215
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.chat-db.rule=Host(`chat-db.localhost`)"
      - "traefik.http.routers.chat-db.entrypoints=websecure"
      - "traefik.http.routers.chat-db.tls=true"
      - "traefik.http.services.chat-db.loadbalancer.server.port=5432"
    networks:
      - microservice-network

  rabbitmq:
    image: rabbitmq:4.0.3-management
    container_name: rabbitmq
    ports:
      - "5672:5672" # RabbitMQ messaging port
      - "15672:15672" # RabbitMQ management console
    networks:
      - microservice-network

  user-service:
    build: ./user
    environment:
      DB_IP: postgres-user-db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: Donmishu215
      DB_DBNAME: user-db
      JWT_SECRET: ${JWT_SECRET}
    deploy:
      replicas: 2
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.user-service-http.rule=Host(`user-service.localhost`)"
      - "traefik.http.routers.user-service-http.entrypoints=web"
      #- "traefik.http.routers.user-service-http.middlewares=redirect-to-https"
      - "traefik.http.routers.user-service-https.rule=Host(`user-service.localhost`)"
      - "traefik.http.routers.user-service-https.entrypoints=websecure"
      - "traefik.http.routers.user-service-https.tls=true"
      - "traefik.http.services.user-service.loadbalancer.server.port=8080"
    depends_on:
      - postgres-user-db
    networks:
      - microservice-network

  device-service:
    build: ./device
    environment:
      DB_IP: postgres-device-db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: Donmishu215
      DB_DBNAME: device-db
      JWT_SECRET: ${JWT_SECRET}
    deploy:
      replicas: 2
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.device-service-http.rule=Host(`device-service.localhost`)"
      - "traefik.http.routers.device-service-http.entrypoints=web"
      #- "traefik.http.routers.device-service-http.middlewares=redirect-to-https"
      - "traefik.http.routers.device-service-https.rule=Host(`device-service.localhost`)"
      - "traefik.http.routers.device-service-https.entrypoints=websecure"
      - "traefik.http.routers.device-service-https.tls=true"
      - "traefik.http.services.device-service.loadbalancer.server.port=8080"
    depends_on:
      - postgres-device-db
    networks:
      - microservice-network

  monitoring-service:
    build: ./monitoring
    environment:
      DB_IP: postgres-monitoring-db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: Donmishu215
      DB_DBNAME: monitoring-communication-db
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      JWT_SECRET: ${JWT_SECRET}
    deploy:
      replicas: 1
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.monitoring-service-http.rule=Host(`monitoring-service.localhost`)"
      - "traefik.http.routers.monitoring-service-http.entrypoints=web"
      #- "traefik.http.routers.monitoring-service-http.middlewares=redirect-to-https"
      - "traefik.http.routers.monitoring-service-https.rule=Host(`monitoring-service.localhost`)"
      - "traefik.http.routers.monitoring-service-https.entrypoints=websecure"
      - "traefik.http.routers.monitoring-service-https.tls=true"
      - "traefik.http.services.monitoring-service.loadbalancer.server.port=8080"
    depends_on:
      - postgres-monitoring-db
      - rabbitmq
    networks:
      - microservice-network

  chat-service:
    build: ./chat
    environment:
      DB_IP: postgres-chat-db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: Donmishu215
      DB_DBNAME: chat-db
      JWT_SECRET: ${JWT_SECRET}
    deploy:
      replicas: 2
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.chat-service-http.rule=Host(`chat-service.localhost`)"
      - "traefik.http.routers.chat-service-http.entrypoints=web"
      #- "traefik.http.routers.chat-service-http.middlewares=redirect-to-https"
      - "traefik.http.routers.chat-service-https.rule=Host(`chat-service.localhost`)"
      - "traefik.http.routers.chat-service-https.entrypoints=websecure"
      - "traefik.http.routers.chat-service-https.tls=true"
      - "traefik.http.services.chat-service.loadbalancer.server.port=8080"
    depends_on:
      - postgres-chat-db
    networks:
      - microservice-network

  frontend-react:
    build:
      context: ./my-app
      dockerfile: Dockerfile
    deploy:
      replicas: 1
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend-react-http.rule=Host(`frontend-react.localhost`)"
      - "traefik.http.routers.frontend-react-http.entrypoints=web"
      #- "traefik.http.routers.frontend-react-http.middlewares=redirect-to-https"
      - "traefik.http.routers.frontend-react-https.rule=Host(`frontend-react.localhost`)"
      - "traefik.http.routers.frontend-react-https.entrypoints=websecure"
      - "traefik.http.routers.frontend-react-https.tls=true"
      - "traefik.http.services.frontend-react.loadbalancer.server.port=80"
    environment:
      REACT_APP_USER_API_URL: user-service
      REACT_APP_DEVICE_API_URL: device-service
      REACT_APP_MONITORING_API_URL: monitoring-service
      REACT_APP_CHAT_API_URL: chat-service
      REACT_APP_USER_PORT: 8080
      REACT_APP_DEVICE_PORT: 8080
      REACT_APP_MONITORING_PORT: 8080
      REACT_APP_CHAT_PORT: 8080
    depends_on:
      - user-service
      - device-service
      - monitoring-service
      - chat-service
    networks:
      - microservice-network

networks:
  microservice-network:
    name: microservice-network
    driver: bridge

volumes:
  traefik_logs:
